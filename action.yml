name: 'ZON Baseproject Connector'
description: 'A composite Action that fetches infrastructure config generated by the ZeitOnline baseproject Terraform module.'

inputs:

  # Project Name and Environment are mandatory and uniquely identify one
  # specific baseproject instance.
  project_name:
    description: 'The Name (project_name) of the ZON baseproject'
    required: true
  environment:
    description: 'The Environment in which the workflow runs'
    required: true
    default: 'production'

  # Authentication-related features to be used in the parent workflow
  google_auth:
    description: 'Authenticate to Google Cloud'
    required: false
    default: 'false'
  gke_auth:
    description: 'Authenticate to GKE (Google Kubernetes Engine)'
    required: false
    default: 'false'
  gcr_auth:
    description: 'Authenticate to GCR (Googke Container Registry)'
    required: false
    default: 'false'
  vault_export_token:
    description: 'Get a Vault Token and export it as VAULT_TOKEN'
    required: false
    default: 'false'
  python_registry:
    description: 'Setup Auth for the Google Python Artifact Registry'
    required: false
    default: 'false'

outputs:
  project_name:
    value: ${{ steps.baseproject-config.outputs.project_name }}
  environment:
    value: ${{ steps.baseproject-config.outputs.environment }}
  namespace:
    value: ${{ steps.baseproject-config.outputs.namespace }}
  ci_sa_name:
    value: ${{ steps.baseproject-config.outputs.ci_sa_name }}
  wi_sa_name:
    value: ${{ steps.baseproject-config.outputs.wi_sa_name }}
  cluster_name:
    value: ${{ steps.baseproject-config.outputs.cluster_name }}
  cluster_project:
    value: ${{ steps.baseproject-config.outputs.cluster_project }}
  cluster_location:
    value: ${{ steps.baseproject-config.outputs.cluster_location }}
  vault_role:
    value: ${{ steps.baseproject-config.outputs.vault_role }}
  vault_addr:
    value: https://vault.ops.zeit.de
  gha_vault_path:
    value: github-actions
  gha_vault_role:
    value: ${{ steps.baseproject-config.outputs.gha_vault_role }}
  gcloud_access_token:
    value: ${{ steps.output_gcloud_token.outputs.gcloud_access_token }}

  # Static outputs
  gcr_image_registry:
    value: eu.gcr.io/zeitonline-210413
  python_registry_url:
    value: https://europe-west3-python.pkg.dev/zeitonline-engineering/pypi-zon/


runs:

  using: "composite"

  steps:
    - name: Retrieve Baseproject Environment Config from Vault
      id: raw-config
      uses: hashicorp/vault-action@v2.4.2
      with:
        url: https://vault.ops.zeit.de
        method: jwt
        path: github-actions
        role: gha-baseproject
        secrets: |
          zon-v2/data/baseproject/${{ inputs.project_name }}/${{ inputs.environment }}/infos raw;

    - id: baseproject-config
      shell: bash
      # Right now this is the only known way to pass outputs from a JSON value as outputs from
      # a composite action (hypothesis: between here and any outputs.xy.value, some JSON auto-
      # detection mambo-jambo kicks in and converts the JSON to an internal map-like data
      # structure from which it's impossible (or at least unclear) how to get individual fields).
      run: |
        echo "project_name=${{ inputs.project_name }}" >> $GITHUB_OUTPUT
        echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "namespace=${{ fromJSON(steps.raw-config.outputs.raw).namespace }}" >> $GITHUB_OUTPUT
        echo "ci_sa_name=${{ fromJSON(steps.raw-config.outputs.raw).ci-sa-name }}" >> $GITHUB_OUTPUT
        echo "wi_sa_name=${{ fromJSON(steps.raw-config.outputs.raw).wi-sa-name }}" >> $GITHUB_OUTPUT
        echo "cluster_name=${{ fromJSON(steps.raw-config.outputs.raw).cluster-name }}" >> $GITHUB_OUTPUT
        echo "cluster_project=${{ fromJSON(steps.raw-config.outputs.raw).cluster-project }}" >> $GITHUB_OUTPUT
        echo "cluster_location=${{ fromJSON(steps.raw-config.outputs.raw).cluster-location }}" >> $GITHUB_OUTPUT
        echo "vault_role=${{ fromJSON(steps.raw-config.outputs.raw).vault-role }}" >> $GITHUB_OUTPUT
        echo "gha_vault_role=${{ fromJSON(steps.raw-config.outputs.raw).gha-vault-role }}" >> $GITHUB_OUTPUT

    - name: GCloud OIDC Auth
      id: auth
      if: inputs.google_auth == 'true' || inputs.gke_auth == 'true' || inputs.gcr_auth == 'true'
      uses: google-github-actions/auth@v0
      with:
        token_format: 'access_token'
        workload_identity_provider: projects/161854031382/locations/global/workloadIdentityPools/github-pool/providers/github-actions-provider
        service_account: ${{ steps.baseproject-config.outputs.ci_sa_name }}

    - name: Set GCloud Access Token as output
      id: output_gcloud_token
      if: steps.auth.outputs.access_token != ''
      shell: bash
      run: echo "gcloud_access_token=${{ steps.auth.outputs.access_token }}" >> $GITHUB_OUTPUT

    - name: Write GKE Credentials to kubeconfig
      if: inputs.gke_auth == 'true'
      uses: google-github-actions/get-gke-credentials@v0.6.0
      with:
        cluster_name: ${{ steps.baseproject-config.outputs.cluster_name }}
        project_id: ${{ steps.baseproject-config.outputs.cluster_project }}
        location: ${{ steps.baseproject-config.outputs.cluster_location }}

    - name: Install kubectl
      if: inputs.gke_auth == 'true'
      uses: azure/setup-kubectl@v2.0
      with:
        version: v1.21.0

    - if: inputs.gke_auth == 'true'
      shell: bash
      run: kubectl config set-context --current --namespace=${{ steps.baseproject-config.outputs.namespace }}

    - name: Login to GCR
      if: inputs.gcr_auth == 'true'
      uses: docker/login-action@v1
      with:
        registry: eu.gcr.io
        username: oauth2accesstoken
        password: ${{ steps.auth.outputs.access_token }}

    - name: Export a Vault token
      id: vault-export-token
      if: inputs.vault_export_token == 'true'
      uses: hashicorp/vault-action@v2.4.2
      with:
        url: https://vault.ops.zeit.de
        method: jwt
        path: github-actions
        role: ${{ steps.baseproject-config.outputs.gha_vault_role }}
        exportToken: true
        secrets: sys/auth "token/" # Because the action needs to read something and Token auth is always there

    - name: Setup Python Artifact Registry
      id: python-registry
      if: inputs.python_registry == 'true'
      shell: bash
      run: |
        python -m pip install --upgrade --upgrade-strategy eager setuptools twine keyrings.google-artifactregistry-auth
